// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  passwordHash  String    @map("password_hash")
  emailVerified Boolean   @default(false) @map("email_verified")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  payments      Payment[]
  wallets       Wallet[]
  
  @@map("users")
}

// Payment model for transaction tracking
model Payment {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  amount            Decimal       @db.Decimal(12, 2)
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  razorpayPaymentId String?       @map("razorpay_payment_id")
  razorpayOrderId   String?       @map("razorpay_order_id")
  description       String?
  metadata          Json?         @default("{}")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentEvents   PaymentEvent[]
  transactions    Transaction[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([razorpayPaymentId])
  @@map("payments")
}

// Payment status enum
enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED

  @@map("payment_status")
}

// Payment events for audit trail
model PaymentEvent {
  id        String   @id @default(cuid())
  paymentId String   @map("payment_id")
  eventType String   @map("event_type")
  eventData Json?    @default("{}") @map("event_data")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  @@index([paymentId])
  @@index([createdAt])
  @@map("payment_events")
}

// Wallet model for user balances
model Wallet {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  balance   Decimal  @default(0) @db.Decimal(12, 2)
  currency  String   @default("INR")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@unique([userId, currency])
  @@index([userId])
  @@map("wallets")
}

// Transaction model for wallet operations
model Transaction {
  id           String          @id @default(cuid())
  walletId     String          @map("wallet_id")
  paymentId    String?         @map("payment_id")
  type         TransactionType
  amount       Decimal         @db.Decimal(12, 2)
  description  String?
  balanceAfter Decimal         @db.Decimal(12, 2) @map("balance_after")
  metadata     Json?           @default("{}")
  createdAt    DateTime        @default(now()) @map("created_at")

  // Relations
  wallet  Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  payment Payment? @relation(fields: [paymentId], references: [id])
  
  @@index([walletId])
  @@index([createdAt])
  @@map("transactions")
}

// Transaction type enum
enum TransactionType {
  CREDIT
  DEBIT

  @@map("transaction_type")
}